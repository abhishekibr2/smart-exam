name: Auto generate release on PR Merge

on:
  pull_request:
    types:
      - closed
permissions:
  contents: write
jobs:
  create_release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PR_TITLE=$(jq --raw-output .pull_request.title "$GITHUB_EVENT_PATH")
          PR_BODY=$(jq --raw-output .pull_request.body "$GITHUB_EVENT_PATH")
          PR_URL=$(jq --raw-output .pull_request.html_url "$GITHUB_EVENT_PATH")

          COMMITS=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/commits")

          COMMIT_MESSAGES=$(echo "$COMMITS" | jq -r '.[] | "- \(.commit.message) ([View Commit](\(.html_url)))"')

          RELEASE_BODY=$(cat <<EOF
          ## $PR_TITLE

          $PR_BODY

          **Merged PR:** [#$PR_NUMBER]($PR_URL)

          **Commits in this PR:**
          $COMMIT_MESSAGES
          EOF
          )

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.latest_tag }}
          release_name: Release ${{ steps.get_latest_tag.outputs.latest_tag }}
          body: ${{ steps.generate_release_notes.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
